#!/bin/bash
# Quick setup for a fresh linux install

# Colorized output
#   Param $1 string | The logging level: info, warning, or error
#   Param $2 string | The message to be logged
function log () {
  if [[ $# -lt 2 ]]; then
    echo "${red}ERROR: function addRepoCheck was run without sufficient parameters ${normal}"
    return
  fi
  
  case $1 in
    info)
      echo "INFO: $2"
    ;;
    warn)
      echo "${yellow}WARNING: $2 ${normal}"
    ;;
    error)
      echo "${red}ERROR: $2 ${normal}"
    ;;
    *)
      echo "${red}ERROR: Unrecognized log level: $1 ${normal}"
    ;;
  esac
}

# Check if the user is set correctly for the script
USER=flysy
log info "The user is set to $USER"
log info "Run \"who\" to check the user account"
read -p "Would you like to continue? Y/N: " userConfirm
if [[ ! $userConfirm =~ [yY].* ]]; then
  log info "Exiting setup"
  exit 0
fi

# Set to true to skip expensive operations during testing
TEST=true

# Set colors if available
if test -t 1; then # if terminal
    ncolors=$(which tput > /dev/null && tput colors) # supports color
    if test -n "$ncolors" && test $ncolors -ge 8; then
        normal="$(tput sgr0)"
        red="$(tput setaf 1)"
        yellow="$(tput setaf 3)"
    fi
fi

# Check if running as sudo
if [ "$EUID" -ne 0 ]; then
  log error $'Not run with sudo\n  Exiting'
  exit 1
fi

# General configuration
#   Add /usr/local/bin to PATH
if [[ $PATH != *"/usr/local/bin"* ]]; then
  log info $'Adding /usr/local/bin to \$PATH'
  sudo -u $USER PATH=$PATH:/usr/local/bin
else
  log info $'/usr/local/bin has already been added to \$PATH'
fi

#   Set tab autocomplete to cycle through options
if [[ -z  $(grep -F -x -f /home/$USER/Projects/LinuxScripts/.bashrc /home/$USER/.bashrc | tr -d "\n") ]]; then
#     Command explanation
#       grep
#         -F Interpret PATTERN as a list of fixed strings, separated by newlines, any of which is to be matched.
#         -x Select only those matches that exactly match the whole line.
#         -f /home/$USER/Projects/LinuxScripts/.bashrc Obtain patterns from FILE, one per line.
#       tr
#         -d delete characters in SET1(first non flag arg passed to tr), do not translate
#
#       In sum, if the default .bashrc does not contain all the lines of LinuxScripts/.bashrc, append LinuxScripts/.bashrc to the defualt
  log info "Configuring bash to cycle through tab autocomplete suggestions"
  sudo -u $USER cat "/home/$USER/Projects/LinuxScripts/.bashrc" >> "/home/$USER/.bashrc"
else
  log info ".bashrc has already been configured to cycle through tab autocomplete suggestions"
fi

# Update existing packages
log info "Updating Installed Packages"
if [[ $TEST != true ]]; then
  apt update
  apt upgrade
else
  log info "  Test run. No packages will be updated and installed"
fi
echo ""

############################
# Remove unwanted packages #
############################
log info "Removing Unwanted Packages"
# Remove a package if it's installed
#   Param $1 string | The name of the package to be removed
function purgeCheck () {
  if [[ -z "$1" ]]; then
    log error "  function purgeCheck was run without parameters"
    return
  fi

  if [[ $(dpkg -s $1 2>/dev/null | grep Status) == *"installed" ]]; then
    log info "  Uninstalling $1"
    apt purge "$1"
  else
    log info "  $1 is already uninstalled. Skipping uninstall"
  fi
}

# Remove email manager
purgeCheck thunderbird

echo ""

###########################
# Install wanted packages #
###########################

# Add a repository if they haven't already been added
#   Param $1 string | The name of the repo to be added for searching the local package list
#   Param $2 string | The repo string to pass to add-apt-repository
function addRepoCheck () {
  if [[ $# -lt 2 ]]; then
    log error "function addRepoCheck was run without sufficient parameters"
    return
  fi

  if ! grep -q "^deb .*$1" /etc/apt/sources.list /etc/apt/sources.list.d/*; then
    log info "$1 repository not added. Adding $2"
    add-apt-repository "$2"
    apt update
  else
    log info "The repo $1 has already been added. Skipping add-apt-repository"
  fi
}

# Determines whether a program has been installed or not
#   Param $1 string | The name of the package to check
#   Echo "installed" on package installed, no output otherwise
function isInstalled () {
  if [[ -z "$1" ]]; then
    log error "function isInstalled was run without parameters"
    return
  fi
  
  if [[ $(dpkg -s "$1" 2>/dev/null | grep Status) == *"installed" ]]; then
    echo "installed"
  fi
}

# Checks if a program is already installed before attempting to install it
#   Param $1 string             | The name of the package to be installed
#   Param $2 boolean (Optional) | true to prompt the user for approval of an install. false otherwise
function installOnce () {
  if [[ -z $1 ]]; then
    log error "function installOnce was run without parameters"
    return
  fi

  if [[ -z $(isInstalled $1) ]]; then
    if [[ ! -z "$2" && "$2" == true ]]; then
      read -p "$1 is not installed. Would you like to install it? Y/N: " installAsk

      if [[ $installAsk =~ [yY].* ]]; then
        log info "installing $1"
        apt install "$1"
      else
        log info "Skipping installing $1"
      fi
    else
      log info "installing $1"
      apt install "$1"
    fi
  else
    log info "$1 is already installed"
  fi
}

#   Install external drive format support
installOnce exfat-fuse
installOnce exfat-utils

#   Install file archivers
installOnce p7zip-full

#   Install cURL
installOnce curl

#   Install Macchanger
installOnce macchanger true
#   Install git
installOnce git

#   Install vim
installOnce vim
#     Install youcompleteme dependencies
log info "installing dependencies for youcompleteme"
installOnce build-essential
installOnce cmake
installOnce python3-dev
#     Install Vundle for youcompleteme
if [[ ! -d "/home/$USER/.vim/bundle/Vundle.vim" ]]; then
  log info "Installing Vundle"
  sudo -u $USER git clone "https://github.com/VundleVim/Vundle.vim.git" "/home/$USER/.vim/bundle/Vundle.vim"
  sudo -u $USER cp "/home/$USER/Projects/LinuxScripts/.vimrc" "/home/$USER"
  sudo -u $USER vim +PluginInstall +qall
  log info "Installing YouCompleteMe"
  cd "/home/$USER/.vim/bundle/youcompleteme"
  sudo -u $USER python3 install.py --clangd-completer --ts-completer
else
  log info "YouCompleteMe is already installed. Skipping install"
fi
#     Configure vim as default editor
log info "Configuring vim as the default editor"
log warn "Pick vim.basic not vim.tiny"
update-alternatives --config editor
sudo -u $USER git config --global core.editor vim

# Install video utilities
#   Some decoders
installOnce ubuntu-restricted-extras
#   Install ffmpeg
installOnce ffmpeg
installOnce ffmpegthumbnailer true
#   Install youtube-dl
if ! command -v youtube-dl &> /dev/null; then
  log info "Installing youtube-dl"
  curl -L https://yt-dl.org/downloads/latest/youtube-dl -o /usr/local/bin/youtube-dl
#     Make youtube-dl executable
  chmod a+rx /usr/local/bin/youtube-dl
else
  log info "youtube-dl is already installed. Skipping installation"
fi
#   Install VLC
#VLCRepoCheck=$(addRepoCheck videolan/stable-daily ppa:videolan/stable-daily)
#echo $VLCRepoCheck
#if [[ VLCRepoCheck == *"not added"* ]]; then
#  installOnce vlc
#fi

# Install Chromium
installOnce chromium-browser

# Install Node
if [[ -z $(isInstalled "nodejs") ]]; then
  log info "installing nodejs"
  curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
  sudo apt-get install -y nodejs

  #   Node Configuration
  #     Configure node global packages not to require sudo
  sudo -u $USER npm config set prefix /home/$USER/.local
  sudo -u $USER PATH=/home/$USER/.local/bin/:$PATH
  #     Install some global node packages
  sudo -u $USER npm i -g chai
  sudo -u $USER npm i -g mocha
  sudo -u $USER npm i -g http-server
  sudo -u $USER npm i -g minify
  sudo -u $USER npm i -g nodemon
  sudo -u $USER npm i -g sass
  sudo -u $USER npm i -g standard
else
  log info "nodejs is already installed"
fi

# Install Wine
if [[ -z $(isInstalled winehq-stable) ]]; then
#   Prepare to install wine
#     Enable 32 bit architecture if not yet enabled
  dpkg --add-architecture i386
#     Add wine authentication key
  sudo -u $USER wget -nc https://dl.winehq.org/wine-builds/winehq.key
  apt-key add winehq.key
#   Main Installation
  apt update

  UbuntuVersion=$(cat /etc/os-release | grep VERSION=)

  if [[ $UbuntuVersion != *"Focal Fossa"* ]]; then
    log warn "\"focal\" describes wine for Ubuntu 20.04. For different versions check https://wiki.winehq.org/Ubuntu for the correct keyword"
    log info "The current version is $UbuntuVersion"
  else
    addRepoCheck "wine-builds/ubuntu/" "deb https://dl.winehq.org/wine-builds/ubuntu/ focal main"
    log info "Installing wine"
    apt install --install-recommends winehq-stable
#   Wine configuration
    log info "Configuring wine"
    sudo -u $USER winecfg
#     Create Games directory from wine home
    cd /home/$USER/.wine/drive_c/users/$USER
    sudo -u $USER mkdir Games
    cd /home/$USER/
    sudo -u $USER ln -s .wine/drive_c/users/flysy/Games Games
  fi
else
  log info "wine is already installed"
fi

# Install sl
installOnce sl

# Clean up
apt autoremove

# Finish with style
if [[ $TEST != true ]]; then
  sl
fi
