#!/usr/bin/env bash
# The most portable bash shebang

# TEST=true # toggle test mode
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

. "$SCRIPT_DIR/logger"
USER=flysy

installOnce () {
  if [[ -z $1 ]]; then
    log error "function installOnce was run without parameters"
    log info "  Example usage:"
    log info "    installOnce \"vim\""
    return -1
  fi

  log info "installing $1"

  if isInstalled $1; then
    log info "$1 is already installed"
    return 1
  else
    sudo apt install "$1"
    return 0
  fi
}

isInstalled () {
  if [[ -z "$1" ]]; then
    log error "function isInstalled requires the name of the package to check"
    log info "  Example usage:"
    log info "    isInstalled \"vim\""
    return -1
  fi

  if [[ $(dpkg -s "$1" 2>/dev/null | grep Status) == *"installed" ]]; then
    return 0
  else
    return 1
  fi
}

isUserApproved () {
  if [ $# -lt 1 ]; then
    log fail "function prompUser requires a prompt message"
    log info "  Example usage:"
    log info "    isUserApproved \"Are you sure?\""
    return -1
  else
    read -p "$1 Y/N:" userResponse

    if [[ $userResponse =~ [yY].* ]]; then
      return 0
    else
      return 1
    fi
  fi
}

waitForUser () {
  read -p "Press enter to continue"
}

# Check if running as sudo
if [ "$EUID" -eq 0 ]; then
  log fail "script cannot be ran as sudo"
  log info "  Exiting"

  exit 1
fi

# Ensure /usr/local/bin has been added to PATH
if [[ $PATH != *"/usr/local/bin"* ]]; then
  log info "Adding /usr/local/bin to \$PATH"

  ADD_USR_LOCAL_BIN_TO_PATH_LINE="export PATH=\$PATH:/usr/local/bin"
  if ! grep -q "$ADD_USR_LOCAL_BIN_TO_PATH_LINE" $BASHRC_PATH; then
    echo "" >> $BASHRC_PATH
    echo "$ADD_LOCAL_BIN_TO_PATH_LINE" >> $BASHRC_PATH
  fi
fi

# Enable tab autocomplete cycling for terminal
BASHRC_PATH="/home/$USER/.bashrc"
AUTOCOMPLETE_CYCLING_CONFIGURATION_LINE="bind TAB:menu-complete"

if ! grep -q "$AUTOCOMPLETE_CYCLING_CONFIGURATION_LINE" $BASHRC_PATH; then
  echo "" >> $BASHRC_PATH
  echo "# cycle through tab autocomplete options instead of stopping at shared substrings" >> $BASHRC_PATH
  echo "$AUTOCOMPLETE_CYCLING_CONFIGURATION_LINE" >> $BASHRC_PATH
  log info "Configured .bashrc to cycle through autocomplete options"
fi

# Update existing packages
log info "Updating Installed Packages"
sudo apt update
sudo apt upgrade

# Install app images
APP_IMAGE_PATH="/home/$USER/AppImages"
mkdir -p "/home/$USER/AppImages"
installOnce libfuse2t64
log info "App Images"
log info "  Install the desired app images from the list below into ~/AppImages"
log info "    keepassxc https://keepassxc.org/download/"
log info "    krita https://krita.org/en/download/"
log info "    tagspaces https://www.tagspaces.org/downloads/"
log info "  continue when all app images are in the directory"
waitForUser
chmod +x $APP_IMAGE_PATH/*

log info "  Now connect them with the following commands"
log info "    cd /usr/local/bin"
log info "    sudo ln -s ~/AppImages/<AppImage> command_name"
log info "  Make sure the password vault has been downloaded and is accessible"
log info "  continue when ready"
waitForUser

installOnce curl

if ! which brave-browser >/dev/null 2>&1; then
  if isUserApproved "would you like to install brave browser?"; then
    curl -fsS https://dl.brave.com/install.sh | sh
  fi
fi

if ! isInstalled chromium-browser; then
  if isUserApproved "would you like to install chromium browser?"; then
    installOnce chromium-browser
  fi
fi

installOnce ffmpeg
if ! isInstalled ffmpegthumbnailer; then
  if isUserApproved "would you like to install the ffmpeg thumbnailer for videos?"; then
    installOnce ffmpegthumbnailer
  fi
fi

if installOnce git; then
  git config --global user.name "Shen Yang"
  git config --global user.email "shenyang128@proton.me"
  log info "configured email and name for git"
fi

installOnce p7zip-full # for .7z compressed files
# Provides access to software that may be subject to patent or license restrictions
# Allows some DRM to be played like for mp3s and DVDs
installOnce ubuntu-restricted-extras

if installOnce vim; then
  log info "Configuring vim as the default editor"
  log warn "Pick vim.basic not vim.tiny"
  update-alternatives --config editor
  git config --global core.editor vim
fi

if ! snap list vlc >/dev/null 2>&1; then
  log info "installing vlc"
  sudo snap install vlc
fi

if ! test -f "/home/$USER/.local/bin/yt-dlp"; then
  log info "installing yt-dlp"
  log info "yt-dlp has an asynchronous download"
  log info "continue after the download"
  mkdir -p /home/$USER/.local/bin
  curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o /home/$USER/.local/bin/yt-dlp
  waitForUser
  chmod a+rx "/home/$USER/.local/bin/yt-dlp"

  ADD_LOCAL_BIN_TO_PATH_LINE="export PATH=\$PATH:/home/$USER/.local/bin"
  if ! grep -q "$ADD_LOCAL_BIN_TO_PATH_LINE" $BASHRC_PATH; then
    echo "" >> $BASHRC_PATH
    echo "# add yt-dlp folder to path" >> $BASHRC_PATH
    echo "$ADD_LOCAL_BIN_TO_PATH_LINE" >> $BASHRC_PATH
  fi
fi

if isUserApproved "Would you like to set up a dev environment?"; then
  if ! isInstalled code; then
    if isUserApproved "would you like to install vscode?"; then
      log info "go to https://code.visualstudio.com/download and download the .deb"
      log info "then sudo apt install download.deb"
    fi
  fi

  if ! test -f "/home/$USER/.ssh/id_ed25519"; then
    log info "setting up ssh keys for github"
    log info "  don't set a file name for the key"
    log info "  don't set a passphrase for the key"
    ssh-keygen -t ed25519 -C "shenyang128@proton.me"
    log info "now run eval \"\$(ssh-agent -s)\""
    log info "then run eval ssh-add ~/.ssh/id_ed25519"
    log info "then go to https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account and follow the instructions"
    log info "continue when ready"
    waitForUser
  fi

  if nvm --version >/dev/null 2>&1; then # I have no idea why it's reversed
    log info "Setting up a node environment"
    log info "  find the nvm install command at https://github.com/nvm-sh/nvm?tab=readme-ov-file#installing-and-updating"
    log info "  it relies on the version number which updates frequently"
    log info "    continue after nvm is installed"
    waitForUser
    export NVM_DIR="/home/$USER/.nvm"
    # Load nvm
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    log info "  installing latest LTS node version"
    nvm install --lts
    log info "  setting latest LTS node version as default"
    nvm alias default lts/*
  else
    log info "nvm is installed and it is assumed that nodejs has been set up"
  fi

  if ! isInstalled gh; then
    if isUserApproved "Would you like to install the github cli?"; then
      # from https://github.com/cli/cli/blob/trunk/docs/install_linux.md
      sudo mkdir -p -m 755 /etc/apt/keyrings
      out=$(mktemp)
      wget -nv -O$out https://cli.github.com/packages/githubcli-archive-keyring.gpg
      cat $out | sudo tee /etc/apt/keyrings/githubcli-archive-keyring.gpg > /dev/null
      sudo chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg
      echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
      sudo apt update
      sudo apt install gh
      gh auth login
    else
      log info "gh is already installed"
    fi
  fi

  if isUserApproved "Would you like to set up a casa environment?"; then
    if ! isInstalled heroku; then
      log info "Installing heroku cli"
      curl https://cli-assets.heroku.com/install-ubuntu.sh | sh
      heroku login
    fi

    if ! isInstalled postgresql-12; then
      log info "Installing postgres 12"
      log info "Adding thr postgres repo"
      sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'

      # Add the repo key to the keyring:
      wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor | sudo tee /usr/share/keyrings/postgres-archive-keyring.gpg

      log info "  Open /etc/apt/sources.list.d/pgdg.list with super user permissions so you are allowed to write to the file"
      log info "    Example using vim:"
      log info "      sudo vim /etc/apt/sources.list.d/pgdg.list"
      log info "    Paste \"[signed-by=/usr/share/keyrings/postgres-archive-keyring.gpg]\" between \"deb\" and \"http://apt.postgresql...\""
      log info "      Example: deb [signed-by=/usr/share/keyrings/postgres-archive-keyring.gpg] http://apt.postgresql.org/pub/repos/apt jammy-pgdg main"
      log info "    Save the file"
      log info "  Continue after the key configuration"
      waitForUser

      sudo apt update
      sudo apt install libpq-dev
      sudo apt install postgresql-12

      #   Turn the server on
      sudo systemctl start postgresql@12-main

      #   Add user to Postgres:
      sudo -u postgres psql -c "CREATE USER $USER WITH CREATEDB"
    fi

    RBENV_ROOT="$HOME/.rbenv"
    if [ ! -d $RBENV_ROOT ]; then
      log info "Installing ruby via rbenv"

      installOnce libyaml-dev

      git clone https://github.com/rbenv/rbenv.git $RBENV_ROOT

      ADD_RBENV_BIN_TO_PATH_LINE="export PATH=\$PATH:/home/$USER/.rbenv/bin"
      if ! grep -q "$ADD_RBENV_BIN_TO_PATH_LINE" $BASHRC_PATH; then
        echo "" >> $BASHRC_PATH
        echo "# add rbenv to path" >> $BASHRC_PATH
        echo "$ADD_RBENV_BIN_TO_PATH_LINE" >> $BASHRC_PATH
      fi

      ~/.rbenv/bin/rbenv init

      export PATH=$PATH:/home/flysy/.rbenv/bin

      # Added by `rbenv init` on Tue May 13 09:28:01 PM CDT 2025
      eval "$(rbenv init - --no-rehash bash)"

      git clone https://github.com/rbenv/ruby-build.git "$(rbenv root)/plugins/ruby-build"

      rbenv install 3.3.6
    fi

    #if [ ! -d ~/Projects/casa ]; then
      mkdir -p ~/Projects
      log info "Creating casa directory"

      cd ~/Projects
      git clone git@github.com:FireLemons/casa.git
      cd casa
      bundle
      # A hack to get the setup to work
      bundle exec rails db:reset
      sudo -u postgres psql -d casa_test -c "CREATE EXTENSION pg_stat_statements;"
      bundle exec rails db:reset
      bundle exec rails db:migrate
      bundle exec rake after_party:run

      npm i
      npm run build
      npm run build:css
    #fi
  fi
fi

if isUserApproved "Would you like to set up a gaming environment?"; then
  if ! isInstalled steam; then
    log info "go to https://store.steampowered.com/about/ and download the .deb"
    log info "sudo apt install download.deb"
  fi

  if ! isInstalled winehq-stable; then
    sudo dpkg --add-architecture i386
    
    log info "adding wine repo"
    sudo mkdir -pm755 /etc/apt/keyrings
    wget -O - https://dl.winehq.org/wine-builds/winehq.key | sudo gpg --dearmor -o /etc/apt/keyrings/winehq-archive.key -

    log info "printing ubuntu distribution name"
    cat /etc/os-release

    log info "go to https://gitlab.winehq.org/wine/wine/-/wikis/Debian-Ubuntu#add-the-repository"
    log info "run the command to add the correct repository matching the ubuntu distriubution"
    waitForUser

    sudo apt update
    sudo apt install --install-recommends winehq-stable

    log info "Configuring wine"
    winecfg
    # Create Games directory from wine home
    mkdir -p /home/$USER/.wine/drive_c/users/$USER/Games
    cd /home/$USER/
    ln -s .wine/drive_c/users/$USER/Games Games
  fi

  if ! isInstalled lutris; then
    log info "go to https://github.com/lutris/lutris/releases and download the latest .deb"
    log info "sudo apt install download.deb"
  fi
fi

# Optional Section (bottom)
if ! isInstalled macchanger; then
  if isUserApproved "Would you like to install macchanger?"; then
    installOnce macchanger
  fi
fi

# sudo apt autoremove
