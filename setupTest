#!/bin/bash
# Quick setup for a fresh linux install

# run "who" if you don't remember who the main user is
USER=flysy
# Set to true to skip expensive operations during testing
TEST=true

# Check if running as sudo
if [ "$EUID" -ne 0 ]; then
  echo $'ERROR: Not run with sudo\n  Exiting'
  exit 1
fi

# Add /usr/local/bin to PATH
if [[ $PATH != *"/usr/local/bin"* ]]; then
  echo $'\nINFO: Adding /usr/local/bin to \$PATH\n'
  sudo -u $USER PATH=$PATH:/usr/local/bin
else
  echo $'\nINFO: /usr/local/bin has already been added to \$PATH\n'
fi

# update existing packages
echo $'\nINFO: Updating Installed Packages\n'
if [[ $TEST != true ]]; then
  apt update
  apt upgrade
else
  echo $'  Test run. No packages will be updated and installed\n'
fi

########################
# Remove bloat packages#
########################

# Remove a package if it's installed
#   Param $1 string | The name of the package to be removed
function purgeCheck {
  if [[ -z $1 ]]; then
    echo "ERROR: function purgeCheck was run without parameters"
    return
  fi

  if [[ $(dpkg -s $1 | grep Status) == *"installed" ]]; then
    echo "INFO: Uninstalling $1"
    apt purge $1
  else
    echo "INFO: $1 is already uninstalled. Skipping uninstall"
  fi
}

# Remove email manager
purgeCheck thunderbird

##########################
# Install wanted packages#
##########################

# Add a repository if they haven't already been added
#   Param $1 string | The name of the repo to be added for searching
#   Param $2 string | The repo string to pass to add-apt-repository
function addRepoCheck {
  if [[ $# -lt 2 ]]; then
    echo "ERROR: function addRepoCheck was run without sufficient parameters"
    return
  fi

  if ! grep -q "^deb .*$1" /etc/apt/sources.list /etc/apt/sources.list.d/*; then
    echo "INFO: $1 repository not added. Adding $2"
    add-apt-repository $2
    apt update
  else
    echo "INFO: The repo $1 has already been added. Skipping add-apt-repository"
  fi
}

# Checks if a program is already installed before attempting to install it
#   Param $1 string             | The name of the package to be installed
#   Param $2 boolean (Optional) | true to prompt the user for approval of an install. false otherwise
function installCheck {
  if [[ -z $1 ]]; then
    echo "ERROR: function installCheck was run without parameters"
    return
  fi

  if [[ $(dpkg -s $1 | grep Status) != *"installed" ]]; then
    if [[ ! -z $2 && $2 == true ]]; then
      read -p "$1 is not installed. Would you like to install it? Y/N: " installAsk

      if [[ $installAsk =~ [yY].* ]]; then
        echo "INFO: installing $1"
        apt install $1
      else
        echo "INFO: Skipping installing $1"
      fi
    else
      echo "INFO: installing $1"
      apt install $1
    fi
  else
    echo "INFO: $1 is already installed"
  fi
}

#   Install external drive format support
installCheck exfat-fuse
installCheck exfat-utils

#   Install file archivers
installCheck p7zip-full

#   Install cURL
installCheck curl

#   Install Macchanger
installCheck macchanger true
#   Install git
installCheck git

#   Install vim
installCheck vim
#     Make vim the default editor
sudo -u $USER export VISUAL=vim
sudo -u $USER export EDITOR="$VISUAL"
#     Install youcompleteme dependencies
echo "INFO: installing dependencies for youcompleteme"
installCheck build-essential
installCheck cmake
installCheck python3-dev
#     Install Vundle for youcompleteme
if [[ ! -d "/home/$USER/.vim/bundle/Vundle.vim" ]]; then
  echo "INFO: Installing Vundle"
  sudo -u $USER git clone "https://github.com/VundleVim/Vundle.vim.git" "/home/$USER/.vim/bundle/Vundle.vim"
  sudo -u $USER cp "/home/$USER/Projects/LinuxScripts/.vimrc" "/home/$USER"
  sudo -u $USER vim +PluginInstall +qall
  echo "INFO: Installing YouCompleteMe"
  cd "/home/$USER/.vim/bundle/youcompleteme"
  sudo -u $USER python3 install.py --clangd-completer --ts-completer
else
  echo "INFO: YouCompleteMe is already installed. Skipping install"
fi

# Install video utilities
#   Some decoders
installCheck ubuntu-restricted-extras
#   Install ffmpeg
installCheck ffmpeg
installCheck ffmpegthumbnailer true
#   Install youtube-dl
if ! command -v youtube-dl &> /dev/null; then
  echo "INFO: Installing youtube-dl"
  curl -L https://yt-dl.org/downloads/latest/youtube-dl -o /usr/local/bin/youtube-dl
#     Make youtube-dl executable
  chmod a+rx /usr/local/bin/youtube-dl
else
  echo "INFO: youtube-dl is already installed. Skipping installation"
fi
#   Install VLC
#     Check if VLC repo has been added
addRepoCheck videolan/stable-daily ppa:videolan/stable-daily
installCheck vlc

# Clean up
apt autoremove
