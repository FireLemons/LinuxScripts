#!/bin/bash
# Quick setup for a fresh linux install

# run "who" if you don't remember who the main user is
USER=flysy
# Set to true to skip expensive operations during testing
TEST=true

# Set colors if available
if test -t 1; then # if terminal
    ncolors=$(which tput > /dev/null && tput colors) # supports color
    if test -n "$ncolors" && test $ncolors -ge 8; then
        normal="$(tput sgr0)"
        red="$(tput setaf 1)"
        yellow="$(tput setaf 3)"
    fi
fi

# Colorized output
#   Param $1 string | The logging level: info, warning, or error
#   Param $2 string | The message to be logged
function log {
  if [[ $# -lt 2 ]]; then
    echo "${red}ERROR: function addRepoCheck was run without sufficient parameters ${normal}"
    return
  fi
  
  case $1 in
    info)
      echo "INFO: $2"
    ;;
    warn)
      echo "${yellow}WARNING: $2 ${normal}"
    ;;
    error)
      echo "${red}ERROR: $2 ${normal}"
    ;;
    *)
      echo "${red}ERROR: Unrecognized log level: $1 ${normal}"
    ;;
  esac
}

# Check if running as sudo
if [ "$EUID" -ne 0 ]; then
  log error $'Not run with sudo\n  Exiting'
  exit 1
fi

# Add /usr/local/bin to PATH
if [[ $PATH != *"/usr/local/bin"* ]]; then
  log info $'Adding /usr/local/bin to \$PATH'
  sudo -u $USER PATH=$PATH:/usr/local/bin
else
  log info $'/usr/local/bin has already been added to \$PATH'
fi

# update existing packages
log info 'Updating Installed Packages'
if [[ $TEST != true ]]; then
  apt update
  apt upgrade
else
  log info '  Test run. No packages will be updated and installed'
fi
echo ""

############################
# Remove unwanted packages #
############################
log info $'Removing Unwanted Packages'
# Remove a package if it's installed
#   Param $1 string | The name of the package to be removed
function purgeCheck {
  if [[ -z $1 ]]; then
    log error "  function purgeCheck was run without parameters"
    return
  fi

  if [[ $(dpkg -s $1 2>/dev/null | grep Status) == *"installed" ]]; then
    log info "  Uninstalling $1"
    apt purge $1
  else
    log info "  $1 is already uninstalled. Skipping uninstall"
  fi
}

# Remove email manager
purgeCheck thunderbird

echo ""

###########################
# Install wanted packages #
###########################

# Add a repository if they haven't already been added
#   Param $1 string | The name of the repo to be added for searching
#   Param $2 string | The repo string to pass to add-apt-repository
function addRepoCheck {
  if [[ $# -lt 2 ]]; then
    log error "function addRepoCheck was run without sufficient parameters"
    return
  fi

  if ! grep -q "^deb .*$1" /etc/apt/sources.list /etc/apt/sources.list.d/*; then
    log info "$1 repository not added. Adding $2"
    add-apt-repository $2
    apt update
  else
    log info "The repo $1 has already been added. Skipping add-apt-repository"
  fi
}

# Checks if a program is already installed before attempting to install it
#   Param $1 string             | The name of the package to be installed
#   Param $2 boolean (Optional) | true to prompt the user for approval of an install. false otherwise
function installCheck {
  if [[ -z $1 ]]; then
    log error "function installCheck was run without parameters"
    return
  fi

  if [[ $(dpkg -s $1 2>/dev/null | grep Status) != *"installed" ]]; then
    if [[ ! -z $2 && $2 == true ]]; then
      read -p "$1 is not installed. Would you like to install it? Y/N: " installAsk

      if [[ $installAsk =~ [yY].* ]]; then
        log info "installing $1"
        apt install $1
      else
        log info "Skipping installing $1"
      fi
    else
      log info "installing $1"
      apt install $1
    fi
  else
    log info "$1 is already installed"
  fi
}

#   Install external drive format support
installCheck exfat-fuse
installCheck exfat-utils

#   Install file archivers
installCheck p7zip-full

#   Install cURL
installCheck curl

#   Install Macchanger
installCheck macchanger true
#   Install git
installCheck git

#   Install vim
installCheck vim
#     Install youcompleteme dependencies
log info "installing dependencies for youcompleteme"
installCheck build-essential
installCheck cmake
installCheck python3-dev
#     Install Vundle for youcompleteme
if [[ ! -d "/home/$USER/.vim/bundle/Vundle.vim" ]]; then
  log info "Installing Vundle"
  sudo -u $USER git clone "https://github.com/VundleVim/Vundle.vim.git" "/home/$USER/.vim/bundle/Vundle.vim"
  sudo -u $USER cp "/home/$USER/Projects/LinuxScripts/.vimrc" "/home/$USER"
  sudo -u $USER vim +PluginInstall +qall
  log info "Installing YouCompleteMe"
  cd "/home/$USER/.vim/bundle/youcompleteme"
  sudo -u $USER python3 install.py --clangd-completer --ts-completer
else
  log info "YouCompleteMe is already installed. Skipping install"
fi
#     Configure vim as default editor
log info "Configuring vim as the default editor"
update-alternatives --config editor
sudo -u $USER git config --global core.editor vim

# Install video utilities
#   Some decoders
installCheck ubuntu-restricted-extras
#   Install ffmpeg
installCheck ffmpeg
installCheck ffmpegthumbnailer true
#   Install youtube-dl
if ! command -v youtube-dl &> /dev/null; then
  log info "Installing youtube-dl"
  curl -L https://yt-dl.org/downloads/latest/youtube-dl -o /usr/local/bin/youtube-dl
#     Make youtube-dl executable
  chmod a+rx /usr/local/bin/youtube-dl
else
  log info "youtube-dl is already installed. Skipping installation"
fi
#   Install VLC
VLCRepoCheck=$(addRepoCheck videolan/stable-daily ppa:videolan/stable-daily)
echo $VLCRepoCheck
if [[ VLCRepoCheck == *"not added"* ]]; then
  installCheck vlc
fi

# Install Chromium
installCheck chromium-browser

# Install Node
if [[ $(dpkg -s nodejs 2>/dev/null | grep Status) != *"installed" ]]; then
  read -p "${yellow}node.js[v12] is not installed.
  WARNING: Version 12 may not be the latest LTS version.
  Would you like to install it? Y/N: ${normal}" installAsk

  if [[ $installAsk =~ [yY].* ]]; then
    log info "installing nodejs v12"
    curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -
    apt install -y nodejs

#   Node Configuration
#     Configure node global packages not to require sudo
    sudo -u $USER npm config set prefix ~/.local
    sudo -u $USER PATH=~/.local/bin/:$PATH
#     Install some global node packages
    sudo -u $USER npm i -g chai
    sudo -u $USER npm i -g mocha
    sudo -u $USER npm i -g http-server
    sudo -u $USER npm i -g minify
    sudo -u $USER npm i -g nodemon
    sudo -u $USER npm i -g sass
    sudo -u $USER npm i -g standard
  else
    log info "Skipping installing nodejs"
  fi
else
  log info "nodejs is already installed"
fi

# Clean up
apt autoremove
